name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Automated dependency updates
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Update dependencies
        run: |
          echo "Current dependencies:"
          pnpm list --depth=0
          
          echo ""
          echo "Updating dependencies..."
          pnpm update --latest --interactive false
          
          echo ""
          echo "Updated dependencies:"
          pnpm list --depth=0

      - name: Check for security vulnerabilities
        run: |
          echo "Running security audit..."
          pnpm audit --audit-level moderate || true

      - name: Install updated dependencies
        run: pnpm install

      - name: Run tests to verify updates
        run: |
          echo "Running type check..."
          pnpm run type-check
          
          echo "Running linting..."
          pnpm run lint
          
          echo "Running unit tests..."
          pnpm run test:unit --run
          
          echo "Testing build..."
          pnpm run build

      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (${{ steps.date.outputs.date }})'
          title: 'chore: automated dependency updates - ${{ steps.date.outputs.date }}'
          body: |
            ## 🔄 Automated Dependency Updates
            
            This PR contains automated dependency updates performed on ${{ steps.date.outputs.date }}.
            
            ### Changes Made
            - Updated all dependencies to their latest compatible versions
            - Verified compatibility through automated testing
            - Security audit passed
            
            ### Testing
            - ✅ TypeScript compilation
            - ✅ ESLint checks
            - ✅ Unit tests
            - ✅ Build verification
            
            ### Review Checklist
            - [ ] Verify changelog/release notes for major updates
            - [ ] Check for breaking changes in updated packages
            - [ ] Run full test suite locally if needed
            - [ ] Review any new security advisories
            
            ---
            *This PR was created automatically by the dependency update workflow.*
          branch: automated/dependency-updates-${{ steps.date.outputs.date }}
          delete-branch: true
          labels: |
            dependencies
            automated
            maintenance

  # Security audit job
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive security audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level moderate
          
          echo ""
          echo "Checking for known vulnerabilities..."
          pnpm audit --audit-level high --json > audit-results.json || true
          
          # Parse audit results
          if [ -f audit-results.json ]; then
            VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
            echo "Total vulnerabilities found: $VULNERABILITIES"
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "⚠️ Security vulnerabilities detected!"
              cat audit-results.json | jq '.advisories // {}' | head -20
            else
              echo "✅ No security vulnerabilities found"
            fi
          fi

      - name: Create security issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Security Vulnerabilities Detected';
            const body = `
            ## Security Alert
            
            The automated security audit has detected vulnerabilities in project dependencies.
            
            **Detection Date:** ${new Date().toISOString().split('T')[0]}
            **Workflow:** [Dependency Updates](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### Action Required
            - [ ] Review the audit results in the workflow logs
            - [ ] Update vulnerable dependencies
            - [ ] Test the updates thoroughly
            - [ ] Verify no breaking changes are introduced
            
            ### Next Steps
            1. Run \`pnpm audit\` locally to see detailed vulnerability information
            2. Update dependencies using \`pnpm update\`
            3. For dependencies that cannot be updated, consider:
               - Finding alternative packages
               - Implementing security mitigations
               - Accepting the risk if impact is minimal
            
            ---
            *This issue was created automatically by the security audit workflow.*
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,vulnerability'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security Vulnerabilities Detected')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['security', 'vulnerability', 'automated', 'high-priority']
              });
            } else {
              console.log('Security issue already exists, skipping creation');
            }

  # Outdated packages report
  outdated-report:
    name: Outdated Packages Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate outdated packages report
        run: |
          echo "# Outdated Packages Report" > outdated-report.md
          echo "Generated on: $(date)" >> outdated-report.md
          echo "" >> outdated-report.md
          
          echo "## Production Dependencies" >> outdated-report.md
          echo '```' >> outdated-report.md
          pnpm outdated --prod || echo "No outdated production dependencies" >> outdated-report.md
          echo '```' >> outdated-report.md
          echo "" >> outdated-report.md
          
          echo "## Development Dependencies" >> outdated-report.md
          echo '```' >> outdated-report.md
          pnpm outdated --dev || echo "No outdated development dependencies" >> outdated-report.md
          echo '```' >> outdated-report.md
          echo "" >> outdated-report.md
          
          echo "## All Dependencies" >> outdated-report.md
          echo '```' >> outdated-report.md
          pnpm outdated || echo "All dependencies are up to date!" >> outdated-report.md
          echo '```' >> outdated-report.md

      - name: Upload outdated report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages-report
          path: outdated-report.md
          retention-days: 30

      - name: Comment on PR if exists
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('outdated-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📦 Outdated Packages Report\n\n${report}`
            });

  # Cleanup old dependency update branches
  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Delete old dependency update branches
        run: |
          echo "Cleaning up old automated dependency update branches..."
          
          # Get all remote branches
          git fetch --all
          
          # Find branches matching the pattern and older than 7 days
          OLD_BRANCHES=$(git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/automated/dependency-updates-* | \
            awk '$2 <= "'$(date -d '7 days ago' -I)'"' | \
            awk '{print $1}' | \
            sed 's|origin/||')
          
          if [ -n "$OLD_BRANCHES" ]; then
            echo "Found old branches to delete:"
            echo "$OLD_BRANCHES"
            
            for branch in $OLD_BRANCHES; do
              echo "Deleting branch: $branch"
              git push origin --delete "$branch" || echo "Failed to delete $branch (might not exist)"
            done
          else
            echo "No old branches found to delete"
          fi