{"version":3,"file":"ContentSlot-B9iVwbhB.js","sources":["../../../../node_modules/.pnpm/@nuxtjs+mdc@0.9.5_magicast@0.3.5/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCSlot.vue","../../../../node_modules/.pnpm/@nuxt+content@2.13.4_db0@0.3.2_ioredis@5.7.0_magicast@0.3.5_nuxt@3.19.2_@parcel+watcher_7e7971975ff5eb694dd433e304c853bb/node_modules/@nuxt/content/dist/runtime/components/ContentSlot.vue"],"sourcesContent":["<script>\nimport { flatUnwrap } from \"../utils/node\";\nimport { defineComponent, getCurrentInstance, useSlots, computed, h } from \"#imports\";\nexport default defineComponent({\n  name: \"MDCSlot\",\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: \"default\"\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * VNode to render\n     * This is only useful for render functions\n     */\n    use: {\n      type: Function,\n      default: void 0\n    }\n  },\n  setup(props) {\n    const { parent } = getCurrentInstance();\n    const { default: fallbackSlot } = useSlots();\n    const tags = computed(() => {\n      if (typeof props.unwrap === \"string\") {\n        return props.unwrap.split(\" \");\n      }\n      return [\"*\"];\n    });\n    return {\n      fallbackSlot,\n      tags,\n      parent\n    };\n  },\n  render({ use, unwrap, fallbackSlot, tags, parent }) {\n    try {\n      let slot = use;\n      if (typeof use === \"string\") {\n        slot = parent?.slots[use] || parent?.parent?.slots[use];\n        console.warn(`Please set :use=\"$slots.${use}\" in <MDCSlot> component to enable reactivity`);\n      }\n      if (!slot) {\n        return fallbackSlot ? fallbackSlot() : h(\"div\");\n      }\n      return unwrap ? flatUnwrap(slot(), tags) : [slot()];\n    } catch {\n      return h(\"div\");\n    }\n  }\n});\n</script>\n","<script>\nimport { defineComponent, h, resolveComponent } from \"vue\";\nexport default defineComponent({\n  props: {\n    /**\n     * A slot name or function\n     */\n    use: {\n      type: Function,\n      default: void 0\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    }\n  },\n  render(props) {\n    return h(resolveComponent(\"MDCSlot\"), props);\n  }\n});\n</script>\n"],"names":["_sfc_main","__nuxt_component_0"],"mappings":";;AAGA,MAAKA,cAAa,gBAAa;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,OAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA;;;;;IAMX,QAAQ;AAAA,MACN,MAAM,CAAC,SAAS,MAAM;AAAA,MACtB,SAAS;AAAA;;;;;IAMX,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA;EAEF,MAAM,OAAO;AACX,UAAM,EAAE,OAAK,IAAM,mBAAkB;AACrC,UAAM,EAAE,SAAS,aAAW,IAAM,SAAQ;AAC1C,UAAM,OAAO,SAAS,MAAM;AAC1B,UAAI,OAAO,MAAM,WAAW,UAAU;AACpC,eAAO,MAAM,OAAO,MAAM,GAAG;AAAA,MAC/B;AACA,aAAO,CAAC,GAAG;AAAA,IACb,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA;EAEJ;AAAA,EACA,OAAO,EAAE,KAAK,QAAQ,cAAc,MAAM,UAAU;AAClD,QAAI;AACF,UAAI,OAAO;AACX,UAAI,OAAO,QAAQ,UAAU;AAC3B,eAAO,QAAQ,MAAM,GAAG,KAAK,QAAQ,QAAQ,MAAM,GAAG;AACtD,gBAAQ,KAAK,2BAA2B,GAAG,+CAA+C;AAAA,MAC5F;AACA,UAAI,CAAC,MAAM;AACT,eAAO,eAAe,iBAAiB,EAAE,KAAK;AAAA,MAChD;AACA,aAAO,SAAS,WAAW,KAAI,GAAI,IAAI,IAAI,CAAC,MAAM;AAAA,IACpD,QAAQ;AACN,aAAO,EAAE,KAAK;AAAA,IAChB;AAAA,EACF;AACF,CAAC;;;;;;;ACxDI,MAAA,YAAa,gBAAa;AAAA,EAC7B,OAAO;AAAA;AAAA;AAAA;AAAA,IAIL,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA;;;;;IAMX,QAAQ;AAAA,MACN,MAAM,CAAC,SAAS,MAAM;AAAA,MACtB,SAAS;AAAA,IACX;AAAA;EAEF,OAAO,OAAO;AACZ,WAAO,EAAEC,aAA6B,KAAK;AAAA,EAC7C;AACF,CAAC;;;;;;;","x_google_ignoreList":[0,1]}